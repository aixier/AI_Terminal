#!/usr/bin/env node

/**
 * ‰∫ëÁ´ØWebSocketÊµãËØïÂ∑•ÂÖ∑
 * ‰∏ìÈó®ÊµãËØïÈòøÈáå‰∫ëFCÁöÑWebSocketÊîØÊåÅ
 */

const WebSocket = require('ws');
const chalk = require('chalk');

const CLOUD_URL = 'http://ai-terminal-xnbmzvtedv.ap-northeast-1.fcapp.run';

console.log(chalk.cyan.bold('\nüöÄ ÈòøÈáå‰∫ëFC WebSocketÊµãËØï'));
console.log(chalk.gray('=' .repeat(60)));
console.log(chalk.yellow('ÊúçÂä°Âô®:'), CLOUD_URL);
console.log(chalk.yellow('Êó∂Èó¥:'), new Date().toLocaleString());
console.log(chalk.gray('=' .repeat(60)) + '\n');

// WebSocketÂü∫Á°ÄURLÔºà‰∏çÂåÖÂê´http://Ôºâ
const WS_BASE_URL = 'ws://ai-terminal-xnbmzvtedv.ap-northeast-1.fcapp.run';

// ÊµãËØï‰∏çÂêåÁöÑWebSocketÁ´ØÁÇπ
const endpoints = [
    {
        name: 'ÂéüÁîüWebSocketÁ´ØÁÇπ',
        url: `${WS_BASE_URL}/ws/terminal`,
        protocol: 'native'
    },
    {
        name: 'Socket.IOÁ´ØÁÇπ',
        url: `${WS_BASE_URL}/socket.io/?EIO=4&transport=websocket`,
        protocol: 'socket.io'
    }
];

async function testEndpoint(endpoint) {
    console.log(chalk.blue(`\nÊµãËØï: ${endpoint.name}`));
    console.log(chalk.gray(`URL: ${endpoint.url}`));
    console.log(chalk.gray('-'.repeat(40)));
    
    return new Promise((resolve) => {
        let ws;
        let connected = false;
        
        const timeout = setTimeout(() => {
            if (!connected) {
                console.log(chalk.red('  ‚úó ËøûÊé•Ë∂ÖÊó∂ (10Áßí)'));
                if (ws) ws.close();
                resolve(false);
            }
        }, 10000);
        
        try {
            // Ê∑ªÂä†ÂøÖË¶ÅÁöÑËØ∑Ê±ÇÂ§¥
            const options = {
                headers: {
                    'Date': new Date().toUTCString(),
                    'User-Agent': 'AI-Terminal-Test/1.0'
                }
            };
            
            ws = new WebSocket(endpoint.url, options);
            
            ws.on('open', () => {
                connected = true;
                clearTimeout(timeout);
                console.log(chalk.green('  ‚úì WebSocketËøûÊé•ÊàêÂäüÔºÅ'));
                
                // Ê†πÊçÆÂçèËÆÆÂèëÈÄÅ‰∏çÂêåÁöÑÂàùÂßãÂåñÊ∂àÊÅØ
                if (endpoint.protocol === 'native') {
                    // ÂéüÁîüWebSocketÂçèËÆÆ
                    ws.send(JSON.stringify({
                        type: 'init',
                        cols: 80,
                        rows: 24
                    }));
                } else {
                    // Socket.IOÂçèËÆÆ
                    ws.send('2probe');
                }
                
                // Á≠âÂæÖÂìçÂ∫î
                setTimeout(() => {
                    ws.close();
                    resolve(true);
                }, 2000);
            });
            
            ws.on('message', (data) => {
                const dataStr = data.toString();
                console.log(chalk.cyan(`  üì• Êî∂Âà∞Ê∂àÊÅØ: ${dataStr.substring(0, 100)}${dataStr.length > 100 ? '...' : ''}`));
                
                // Ëß£ÊûêÊ∂àÊÅØ
                try {
                    const msg = JSON.parse(dataStr);
                    if (msg.type) {
                        console.log(chalk.green(`     Ê∂àÊÅØÁ±ªÂûã: ${msg.type}`));
                    }
                } catch {
                    // ‰∏çÊòØJSONÊ†ºÂºè
                }
            });
            
            ws.on('error', (error) => {
                clearTimeout(timeout);
                console.log(chalk.red(`  ‚úó ÈîôËØØ: ${error.message}`));
                
                // ÂàÜÊûêÈîôËØØÂéüÂõ†
                if (error.message.includes('400')) {
                    console.log(chalk.yellow('    ÂèØËÉΩÂéüÂõ†: Áº∫Â∞ëÂøÖÈúÄÁöÑËØ∑Ê±ÇÂ§¥'));
                } else if (error.message.includes('403')) {
                    console.log(chalk.yellow('    ÂèØËÉΩÂéüÂõ†: ËÆ§ËØÅÂ§±Ë¥•'));
                } else if (error.message.includes('404')) {
                    console.log(chalk.yellow('    ÂèØËÉΩÂéüÂõ†: Á´ØÁÇπ‰∏çÂ≠òÂú®'));
                } else if (error.message.includes('ECONNREFUSED')) {
                    console.log(chalk.yellow('    ÂèØËÉΩÂéüÂõ†: ÊúçÂä°Âô®Êú™ÂêØÂä®ÊàñÁ´ØÂè£ÈîôËØØ'));
                }
                
                resolve(false);
            });
            
            ws.on('close', (code, reason) => {
                if (connected) {
                    console.log(chalk.gray(`  ËøûÊé•ÂÖ≥Èó≠: ${code} - ${reason || 'Ê≠£Â∏∏ÂÖ≥Èó≠'}`));
                }
            });
            
        } catch (error) {
            clearTimeout(timeout);
            console.log(chalk.red(`  ‚úó ÂàõÂª∫WebSocketÂ§±Ë¥•: ${error.message}`));
            resolve(false);
        }
    });
}

// ÊµãËØïHTTPÁ´ØÁÇπ
async function testHttpEndpoints() {
    console.log(chalk.blue('\nÊµãËØïHTTPÁ´ØÁÇπ'));
    console.log(chalk.gray('-'.repeat(40)));
    
    const http = require('http');
    const endpoints = [
        '/health',
        '/api/ws/status',
        '/api/terminal/health'
    ];
    
    for (const endpoint of endpoints) {
        const url = `${CLOUD_URL}${endpoint}`;
        console.log(`\n  ${endpoint}:`);
        
        await new Promise((resolve) => {
            const options = {
                headers: {
                    'Date': new Date().toUTCString()
                }
            };
            
            http.get(url, options, (res) => {
                console.log(chalk.green(`    Áä∂ÊÄÅÁ†Å: ${res.statusCode}`));
                
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                    if (res.statusCode === 200) {
                        try {
                            const json = JSON.parse(data);
                            console.log(chalk.gray(`    ÂìçÂ∫î: ${JSON.stringify(json).substring(0, 100)}...`));
                        } catch {
                            console.log(chalk.gray(`    ÂìçÂ∫î: ${data.substring(0, 100)}...`));
                        }
                    } else {
                        console.log(chalk.yellow(`    ÈîôËØØ: ${data}`));
                    }
                    resolve();
                });
            }).on('error', (err) => {
                console.log(chalk.red(`    ‚úó ËØ∑Ê±ÇÂ§±Ë¥•: ${err.message}`));
                resolve();
            });
        });
    }
}

// ‰∏ªÂáΩÊï∞
async function main() {
    let successCount = 0;
    
    // ÊµãËØïWebSocketÁ´ØÁÇπ
    for (const endpoint of endpoints) {
        const success = await testEndpoint(endpoint);
        if (success) successCount++;
    }
    
    // ÊµãËØïHTTPÁ´ØÁÇπ
    await testHttpEndpoints();
    
    // ÊÄªÁªì
    console.log(chalk.cyan('\n' + '=' .repeat(60)));
    console.log(chalk.cyan.bold('ÊµãËØïÊÄªÁªì'));
    console.log(chalk.cyan('=' .repeat(60)));
    
    if (successCount > 0) {
        console.log(chalk.green(`‚úÖ ${successCount}/${endpoints.length} ‰∏™WebSocketÁ´ØÁÇπËøûÊé•ÊàêÂäü`));
    } else {
        console.log(chalk.red('‚ùå ÊâÄÊúâWebSocketÁ´ØÁÇπËøûÊé•Â§±Ë¥•'));
        
        console.log(chalk.yellow('\nÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°à:'));
        console.log('1. Á°ÆËÆ§ÈòøÈáå‰∫ëFCÂ∑≤ÂêØÁî®WebSocketÊîØÊåÅ');
        console.log('2. Ê£ÄÊü•FCÂáΩÊï∞ÁöÑËß¶ÂèëÂô®ÈÖçÁΩÆ');
        console.log('3. Á°ÆËÆ§‰ΩøÁî®‰∫ÜËá™ÂÆö‰πâËøêË°åÊó∂');
        console.log('4. Ê£ÄÊü•ËÆ§ËØÅÂíåÁ≠æÂêçÈÖçÁΩÆ');
        console.log('5. Êü•ÁúãFCÂáΩÊï∞Êó•Âøó‰∫ÜËß£ËØ¶ÁªÜÈîôËØØ');
    }
    
    console.log(chalk.gray('\nÊµãËØïÂÆåÊàê'));
}

// Ê£ÄÊü•‰æùËµñ
function checkDependencies() {
    const deps = ['ws', 'chalk'];
    const missing = [];
    
    for (const dep of deps) {
        try {
            require.resolve(dep);
        } catch {
            missing.push(dep);
        }
    }
    
    if (missing.length > 0) {
        console.log(chalk.red('Áº∫Â∞ë‰æùËµñ:'));
        console.log(chalk.yellow(`npm install ${missing.join(' ')}`));
        process.exit(1);
    }
}

checkDependencies();
main().catch(console.error);