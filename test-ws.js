#!/usr/bin/env node

/**
 * ‰∫ëÁ´ØWebSocketËøûÊé•ÊµãËØï
 * ‰∏ìÊ≥®ÊµãËØïÈòøÈáå‰∫ëÂáΩÊï∞ËÆ°ÁÆóÁöÑWebSocketÊúçÂä°
 */

const io = require('socket.io-client');
const chalk = require('chalk');

const CLOUD_URL = 'http://ai-terminal-xnbmzvtedv.ap-northeast-1.fcapp.run';

function log(type, message) {
    const prefix = {
        info: chalk.blue('[INFO]'),
        success: chalk.green('[‚úì]'),
        error: chalk.red('[‚úó]'),
        warning: chalk.yellow('[‚ö†]')
    };
    console.log(`${prefix[type]} ${message}`);
}

async function testWebSocket() {
    console.log(chalk.cyan.bold('\nüîå ‰∫ëÁ´ØWebSocketËøûÊé•ÊµãËØï'));
    console.log(chalk.gray(`ÊúçÂä°Âô®: ${CLOUD_URL}`));
    console.log(chalk.gray(`Êó∂Èó¥: ${new Date().toLocaleString()}\n`));
    
    return new Promise((resolve) => {
        log('info', 'Â∞ùËØïËøûÊé•WebSocket...');
        
        // Â∞ùËØï‰∏çÂêåÁöÑËøûÊé•ÈÖçÁΩÆ
        const configs = [
            {
                name: 'Ê†áÂáÜÈÖçÁΩÆ',
                options: {
                    transports: ['websocket', 'polling'],
                    reconnection: false,
                    timeout: 10000
                }
            },
            {
                name: '‰ªÖWebSocket',
                options: {
                    transports: ['websocket'],
                    reconnection: false,
                    timeout: 10000,
                    upgrade: false
                }
            },
            {
                name: '‰ªÖPolling',
                options: {
                    transports: ['polling'],
                    reconnection: false,
                    timeout: 10000
                }
            },
            {
                name: 'Â∏¶ËÆ§ËØÅÂ§¥',
                options: {
                    transports: ['websocket', 'polling'],
                    reconnection: false,
                    timeout: 10000,
                    extraHeaders: {
                        'Date': new Date().toUTCString()
                    }
                }
            }
        ];
        
        let currentConfig = 0;
        
        function tryNextConfig() {
            if (currentConfig >= configs.length) {
                console.log(chalk.red('\nÊâÄÊúâÈÖçÁΩÆÈÉΩÂ§±Ë¥•‰∫Ü'));
                resolve(false);
                return;
            }
            
            const config = configs[currentConfig];
            console.log(`\n${chalk.yellow('Â∞ùËØïÈÖçÁΩÆ:')} ${config.name}`);
            
            const socket = io(CLOUD_URL, config.options);
            
            const timeout = setTimeout(() => {
                log('error', `ËøûÊé•Ë∂ÖÊó∂ (${config.name})`);
                socket.disconnect();
                currentConfig++;
                tryNextConfig();
            }, 10000);
            
            socket.on('connect', () => {
                clearTimeout(timeout);
                log('success', `WebSocketËøûÊé•ÊàêÂäüÔºÅ`);
                console.log(chalk.gray(`  Socket ID: ${socket.id}`));
                console.log(chalk.gray(`  ‰º†ËæìÊñπÂºè: ${socket.io.engine.transport.name}`));
                console.log(chalk.gray(`  ‰ΩøÁî®ÈÖçÁΩÆ: ${config.name}`));
                
                // ÊµãËØïÂèëÈÄÅÊ∂àÊÅØ
                log('info', 'ÊµãËØïÂèëÈÄÅÊ∂àÊÅØ...');
                
                // Â∞ùËØïÂàõÂª∫ÁªàÁ´Ø‰ºöËØù
                socket.emit('terminal:create', {
                    cols: 80,
                    rows: 24
                });
                
                // ÁõëÂê¨ÂìçÂ∫î
                socket.on('terminal:ready', (data) => {
                    log('success', 'ÁªàÁ´Ø‰ºöËØùÂàõÂª∫ÊàêÂäüÔºÅ');
                    console.log(chalk.gray(`  Terminal ID: ${data.terminalId}`));
                });
                
                socket.on('error', (error) => {
                    log('warning', `SocketÈîôËØØ: ${error}`);
                });
                
                // ÊµãËØïÂá†ÁßíÂêéÊñ≠ÂºÄ
                setTimeout(() => {
                    log('info', 'ÊµãËØïÂÆåÊàêÔºåÊñ≠ÂºÄËøûÊé•');
                    socket.disconnect();
                    resolve(true);
                }, 3000);
            });
            
            socket.on('connect_error', (error) => {
                clearTimeout(timeout);
                log('error', `ËøûÊé•Â§±Ë¥• (${config.name}): ${error.message}`);
                
                // Â¶ÇÊûúÊòØtransport errorÔºåÊòæÁ§∫Êõ¥Â§ö‰ø°ÊÅØ
                if (error.type === 'TransportError') {
                    console.log(chalk.gray(`  ÈîôËØØÁ±ªÂûã: ${error.type}`));
                    console.log(chalk.gray(`  ‰º†ËæìÂ±Ç: ${error.transport?.name || 'unknown'}`));
                }
                
                currentConfig++;
                tryNextConfig();
            });
            
            socket.on('disconnect', (reason) => {
                if (reason === 'io client disconnect') {
                    // ‰∏ªÂä®Êñ≠ÂºÄÔºåÊ≠£Â∏∏
                } else {
                    log('warning', `ËøûÊé•Êñ≠ÂºÄ: ${reason}`);
                }
            });
        }
        
        tryNextConfig();
    });
}

// ÊµãËØï‰∏çÂêåÁöÑURLÊ†ºÂºè
async function testDifferentUrls() {
    const urls = [
        { url: CLOUD_URL, name: 'HTTPÂçèËÆÆ' },
        { url: CLOUD_URL.replace('http://', 'ws://'), name: 'WSÂçèËÆÆ' },
        { url: `${CLOUD_URL}/socket.io`, name: 'Socket.IOË∑ØÂæÑ' }
    ];
    
    console.log(chalk.cyan.bold('\nüì° ÊµãËØï‰∏çÂêåÁöÑURLÊ†ºÂºè'));
    
    for (const {url, name} of urls) {
        console.log(`\n${chalk.yellow('ÊµãËØï:')} ${name}`);
        console.log(chalk.gray(`URL: ${url}`));
        
        const socket = io(url, {
            transports: ['websocket', 'polling'],
            reconnection: false,
            timeout: 5000
        });
        
        await new Promise((resolve) => {
            const timeout = setTimeout(() => {
                log('error', 'ËøûÊé•Ë∂ÖÊó∂');
                socket.disconnect();
                resolve();
            }, 5000);
            
            socket.on('connect', () => {
                clearTimeout(timeout);
                log('success', 'ËøûÊé•ÊàêÂäüÔºÅ');
                socket.disconnect();
                resolve();
            });
            
            socket.on('connect_error', (error) => {
                clearTimeout(timeout);
                log('error', `ËøûÊé•Â§±Ë¥•: ${error.message}`);
                resolve();
            });
        });
    }
}

// ‰∏ªÂáΩÊï∞
async function main() {
    console.log(chalk.bold.cyan('\nüöÄ ‰∫ëÁ´ØWebSocketÊ∑±Â∫¶ÊµãËØïÂ∑•ÂÖ∑'));
    console.log(chalk.gray('=' .repeat(50)));
    
    // ÊµãËØïÂü∫Êú¨ËøûÊé•
    const connected = await testWebSocket();
    
    if (!connected) {
        // Â¶ÇÊûúÂü∫Êú¨ËøûÊé•Â§±Ë¥•ÔºåÂ∞ùËØï‰∏çÂêåÁöÑURLÊ†ºÂºè
        await testDifferentUrls();
    }
    
    console.log(chalk.gray('\n' + '=' .repeat(50)));
    console.log(chalk.cyan('ÊµãËØïÂÆåÊàêÔºÅ'));
    
    if (!connected) {
        console.log(chalk.yellow('\nÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°à:'));
        console.log('1. Ê£ÄÊü•ÈòøÈáå‰∫ëÂáΩÊï∞ËÆ°ÁÆóÊòØÂê¶ÊîØÊåÅWebSocket');
        console.log('2. Á°ÆËÆ§ÊúçÂä°Á´ØSocket.IOÁâàÊú¨ÂÖºÂÆπÊÄß');
        console.log('3. Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÁâπÊÆäÁöÑËÆ§ËØÅÈÖçÁΩÆ');
        console.log('4. Â∞ùËØï‰ΩøÁî®ÈïøËΩÆËØ¢(polling)Êõø‰ª£WebSocket');
    }
}

// Ê£ÄÊü•‰æùËµñ
function checkDependencies() {
    const deps = ['socket.io-client', 'chalk'];
    const missing = [];
    
    for (const dep of deps) {
        try {
            require.resolve(dep);
        } catch {
            missing.push(dep);
        }
    }
    
    if (missing.length > 0) {
        console.log(chalk.red('Áº∫Â∞ë‰æùËµñ:'));
        console.log(chalk.yellow(`npm install ${missing.join(' ')}`));
        process.exit(1);
    }
}

checkDependencies();
main().catch(console.error);